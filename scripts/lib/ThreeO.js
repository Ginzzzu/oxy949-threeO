export class ThreeO {
    static async init() {}
  
static async roll(diceCount, modifier = 'normal', actorId = null) {
  const modulename = "oxy949-threeO";
  const zeroMode = game.settings.get(modulename, "zeroMode");

  // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç—ë—Ä–∞ ‚Äî –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ actorId, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä—Å–æ–Ω–∞–∂
  const actor = actorId ? game.actors.get(actorId) : game.user.character;
  if (!actor) {
    ui.notifications.error("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
    return;
  }

  // –¢–µ–∫—É—â–µ–µ HP (—Ä–∞—Å—Å—É–¥–æ–∫)
  const currentHP = actor.system.attributes?.hp?.value ?? 0;

  // üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º snapshot HP –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–æ—Å–∫–∞ –≤ —Ñ–ª–∞–≥ –∞–∫—Ç—ë—Ä–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–µ—Ä–æ–ª–ª–∞
  await actor.setFlag(modulename, "lastRoll", {
    value: diceCount,
    type: modifier,
    actorId: actor.id,
    prevHP: currentHP,
    timestamp: Date.now()
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ zeroMode –≤—ã–∫–ª—é—á–µ–Ω
  if (!zeroMode && currentHP <= 0) {
    ui.notifications.error("–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–∞!");
    return;
  }

  const easyMode = game.settings.get(modulename, "easyModeLyghtburg");

  let successes = 0;
  let empty = 0;
  let failures = 0;

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞
  const roll = await new Roll(`${diceCount}df`).evaluate();

  roll.terms[0].results.forEach(r => {
    if (r.result === -1) failures += 1;
    if (r.result === 0) empty += 1;
    if (r.result === 1) successes += 1;
  });

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  let rollMessage = "<p>";
  let rollDiceText = "–î–µ–π—Å—Ç–≤—É–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ, ";

  if (diceCount === 1) {
    rollDiceText = "–î–µ–π—Å—Ç–≤—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, ";
  } else if (diceCount === 3) {
    rollDiceText = "–î–µ–π—Å—Ç–≤—É–µ—Ç –æ–ø–∞—Å–Ω–æ, ";
  }

  let rollTypeText = "—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ";
  if (modifier === 'hard') rollTypeText = "–Ω–æ —á—Ç–æ-—Ç–æ –º–µ—à–∞–µ—Ç";
  else if (modifier === 'easy') rollTypeText = "–Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç";

  rollMessage += `<strong style="font-size: large;">${rollDiceText} ${rollTypeText}</strong><br>`;
  rollMessage += "</p>";

  let resourceRemoved = 0;
  let totalResult = 0;

  if (easyMode) {
    if (modifier === 'normal') {
      resourceRemoved = failures + empty - successes;
      totalResult = successes - failures;
    } else if (modifier === 'hard') {
      resourceRemoved = failures + empty - successes;
      totalResult = successes - failures - empty;
    } else if (modifier === 'easy') {
      resourceRemoved = failures - successes;
      totalResult = successes - failures + empty;
    }
  } else {
    if (modifier === 'normal') {
      resourceRemoved = failures + empty;
      totalResult = successes - failures;
    } else if (modifier === 'hard') {
      resourceRemoved = failures + empty;
      totalResult = successes - failures - empty;
    } else if (modifier === 'easy') {
      resourceRemoved = failures;
      totalResult = successes - failures + empty;
    }
  }

  const resourceName = game.settings.get(modulename, "resourceName");

  let statsMessage = "";
  if (resourceRemoved > 0 && currentHP != 0) {
    statsMessage += `<strong style="color: red;">–ü–æ—Ç–µ—Ä—è ${resourceName}: ${resourceRemoved}<br></strong>`;
  } else if (resourceRemoved < 0) {
    statsMessage += `<strong style="color: green;">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ${resourceName}: ${Math.abs(resourceRemoved)}<br></strong>`;
  } else {
    statsMessage += `<strong style="color: grey;">–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å<br></strong>`;
  }

  statsMessage += `<strong style="font-size: medium;">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${totalResult}</strong>`;

  if (!zeroMode && currentHP <= resourceRemoved) {
    statsMessage += `<br><strong style="font-size: large;">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–∞, –ø–æ—Ç–µ—Ä—è —Å–æ–∑–Ω–∞–Ω–∏—è!</strong>`;
  }

  const flavor = `${rollMessage}${statsMessage}`;
  const speaker = ChatMessage.getSpeaker({ actor: actor });

  // –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∏ –∞–Ω–∏–º–∞—Ü–∏—è –∫—É–±–∏–∫–æ–≤
  await roll.toMessage({ rollMode: 'publicroll', flavor, speaker });

  // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω/–ª–µ—á–µ–Ω–∏–µ (applyDamage –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ)
  Hooks.once("diceSoNiceRollComplete", () => {
    setTimeout(() => {
      actor.applyDamage(resourceRemoved);
    }, 500);
  });
}

  
    static async useCharm(diceCount) {
    const character = game.user.character;

  
      if (!character) {
        ui.notifications.error("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
        return;
      }
  
      const currentHP = character.system.attributes.hp.value;
  
      if (currentHP <= 0) {
        ui.notifications.error("–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–∞!");
        return;
      }
  
      const modulename = "oxy949-threeO";
      const itemName = "–¢–∞–ª–∏—Å–º–∞–Ω";
  
      const item = character.items.find(i => i.name === itemName && i.type === "consumable");
  
      if (!item) {
        ui.notifications.warn(`–ü—Ä–µ–¥–º–µ—Ç "${itemName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return;
      }
  
      const qty = item.system.quantity;
  
      if (qty < 1) {
        ui.notifications.warn(`–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä—è–¥–æ–≤ "${itemName}".`);
        return;
      }
  
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞
      let successes = 0;
      let empty = 0;
      let failures = 0;
  
      //const roll = await new Roll(`${diceCount}df`).evaluate({ async: true });
      const roll = await new Roll(`${diceCount}df`).evaluate(); 

  
      roll.terms[0].results.forEach(r => {
        if (r.result === -1) failures += 1;
        if (r.result === 0) empty += 1;
        if (r.result === 1) successes += 1;
      });
  
      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      let rollMessage = "<p>";
      let rollDiceText = "–°–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Ç–∞–ª–∏—Å–º–∞–Ω...";
  
      if (diceCount === 1) {
        rollDiceText = "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ –¥–æ—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç—Å—è –¥–æ —Ç–∞–ª–∏—Å–º–∞–Ω–∞...";
      } else if (diceCount === 3) {
        rollDiceText = "–°–∂–∏–º–∞–µ—Ç —Ç–∞–ª–∏—Å–º–∞–Ω –∏–∑–æ –≤—Å–µ—Ö —Å–∏–ª!...";
      }

      rollMessage += `<strong style="font-size: large; color: purple;">${rollDiceText}</strong><br>`;
      if (failures === 3 ){
      rollMessage += `<strong style="font-size: large; color: red;">–û, –ù–ï–¢!!!...</strong><br>`;
      } else if (successes === 3 ){
      rollMessage += `<strong style="font-size: large; color: green;">–û, –î–ê–ê–ê!!!...</strong><br>`;
      } else {
        if (qty - failures > 0) {
        //  rollMessage += `<strong style="font-size: small;">–û—Å—Ç–∞–ª–æ—Å—å –∑–∞—Ä—è–¥–æ–≤ —Ç–∞–ª–∏—Å–º–∞–Ω–∞:${qty - failures}</strong><br>`;
        }
        else {
          rollMessage += `<strong style="font-size: large; color: red;">–ù–æ –±–æ–ª—å—à–µ –æ–Ω –Ω–µ –ø–æ–º–æ–∂–µ—Ç...</strong><br>`;
        }
      }
      rollMessage += "</p>";
  
      let totalResult = (successes + empty) * 2;
      let resourceName = game.settings.get(modulename, "resourceName");

      if (failures >= qty){
        totalResult = totalResult * 0.5;
      }
      if (failures === 3){
        totalResult = -10;
      }
      if (successes === 3){
        totalResult = 10;
      }
  
      let statsMessage = `<strong style="color: green;">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ${resourceName}: ${totalResult}<br></strong>`;
      if (failures >= qty) {        
        if (currentHP <= -totalResult) {
            statsMessage = `<strong style="font-size: large;">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–∞, –ø–æ—Ç–µ—Ä—è —Å–æ–∑–Ω–∞–Ω–∏—è!</strong>`;
        }
      }
      // –§–æ—Ä–º–∏—Ä—É–µ–º html-–∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ. –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–µ–≤–∞.
      const messageHtml = `
        <div style="display: flex; align-items: flex-start;">
          <img src="${item.img}" alt="${itemName}" style="width:60px; height:60px; border-width: 0; margin-right:10px;" />
          <div>
            ${rollMessage}${statsMessage}
          </div>
        </div>
      `;

      const flavor = messageHtml;
      const speaker = ChatMessage.getSpeaker({ actor: character });
  
      await roll.toMessage({ rollMode: 'publicroll', flavor, speaker });
  
      Hooks.once("diceSoNiceRollComplete", async () => {
        setTimeout(async () => {
          character.applyDamage(-totalResult);
  
          if (failures < qty) {
            await item.update({ "system.quantity": qty - failures });
            //ui.notifications.info(`"${itemName}" –æ—Å—Ç–∞–ª–æ—Å—å ${qty - failures} –∑–∞—Ä—è–¥(–∞).`);
          } else {
            await item.delete();
            character.applyDamage(failures - qty);
            //ui.notifications.info(`"${itemName}" –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ —É–¥–∞–ª—ë–Ω.`);
          }
        }, 500);
      });
    }
  }
  
  
  //–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —á–∞—Ä–Ω–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫–∞
class ThreeOActorSheet extends ActorSheet {
  static get defaultOptions() {
    return foundry.utils.mergeObject(super.defaultOptions, {
      classes: ["threeO", "sheet", "actor"],
      template: "modules/oxy949-threeO/templates/actor-sheet.html",
      width: 1060,
      height: 610,
      submitOnChange: true   // —Ç–µ–ø–µ—Ä—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∏ blur    
        
    });
  }

  async getData(options) {
    const context = await super.getData(options);
    context.system = this.actor.system ?? {};

    const modulename = "oxy949-threeO";
    context.resourceName = game.settings.get(modulename, "resourceName");
    context.inspName = game.settings.get(modulename, "inspName");    
    context.inspSound = game.settings.get(modulename, "inspSound");        
    context.actionList = game.settings.get(modulename, "actionList");
    context.resourceShow = game.settings.get(modulename, "resourceShow");
    context.itemsName = game.settings.get(modulename, "itemsName"); 
    context.charInfoName = game.settings.get(modulename, "charInfoName");     
    context.additionalInfo1 = this.actor.getFlag(modulename, "additionalInfo1") ?? "";
    context.additionalInfoCharacter =  this.actor.getFlag(modulename, "additionalInfoCharacter") ?? "";    
    context.additionalInfo2 = this.actor.getFlag(modulename, "additionalInfo2") ?? "";
    context.additionalInfo3 = this.actor.getFlag(modulename, "additionalInfo3") ?? "";  
    context.gmNotes = this.actor.getFlag("oxy949-threeO", "gmNotes") ?? "";             
    context.isGM = game.user.isGM;
    context.inspiration = this.actor.getFlag("oxy949-threeO", "inspiration") ?? 0;
    context.inspirationChecks = [1, 2, 3, 4, 5];

Hooks.once("ready", function() {
  // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç–∞ –µ—â—ë –Ω–µ—Ç
  if (!game.threeO) game.threeO = {};

  // –§—É–Ω–∫—Ü–∏—è –±—Ä–æ—Å–∫–∞
  game.threeO.roll = async function(actionValue, actionType, actorId=null) {
    // —Å–∞–º –±—Ä–æ—Å–æ–∫
    const roll = await new Roll("1d20").roll({async:true});
    roll.toMessage({flavor: `–ë—Ä–æ—Å–æ–∫ (${actionType}), —Å–ª–æ–∂–Ω–æ—Å—Ç—å ${actionValue}`});

    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç—ë—Ä–∞
    let actor = actorId ? game.actors.get(actorId) : game.user.character;
    if (!actor) return;

    // –ü—Ä–∏–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞ (hp = "—Ä–∞—Å—Å—É–¥–æ–∫")
    let hp = foundry.utils.duplicate(actor.system.attributes.hp);
    hp.value = Math.max(0, Math.min(hp.max, hp.value - actionValue));
    await actor.update({"system.attributes.hp": hp});
  
    const currentHP = character.system.attributes.hp.value;
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ HP –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞ "–û–≤–∞—Ü–∏–µ–π"
    game.threeO = game.threeO || {};
    game.threeO.lastHP = currentHP;    
  };
});
    // cover.jpg
    const coverPath = `worlds/${game.world.id}/cover.jpg`;
    try { await fetch(coverPath, { method: "HEAD" }); context.cover = coverPath; }
    catch { context.cover = null; }

    // ----- –ò–ù–í–ï–ù–¢–ê–†–¨ -----
    let inv = this.actor.getFlag(modulename, "inventory") ?? [];
    const minRows = game.settings.get(modulename, "minInventoryRows") ?? 3;
    if (inv.length < minRows) {
      inv = Array.from({ length: minRows }, (_, i) => inv[i] ?? "");
      await this.actor.setFlag(modulename, "inventory", inv);
    }
    context.inventory = inv;
    context.invFlagPath = `flags.${modulename}.inventory`;

    // –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    context.additionalInfo = this.actor.getFlag(modulename, "additionalInfo") ?? "";

    return context;
  }

  activateListeners(html) {
  super.activateListeners(html);
  const modulename = "oxy949-threeO";

  // ------------------------
  // –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ –≤ —á–∞—Ä–Ω–∏–∫–µ
  // ------------------------
  html.find(".change-token-btn").on("click", async ev => {
    ev.preventDefault();

    const fp = new FilePicker({
      type: "image",
      current: this.actor.prototypeToken.texture.src,
      callback: async (path) => {
        await this.actor.update({ "prototypeToken.texture.src": path });
        ui.notifications.info("–¢–æ–∫–µ–Ω –∏–∑–º–µ–Ω—ë–Ω.");
      },
      top: this.position.top + 40,
      left: this.position.left + 10
    });
    fp.render(true);
  });

  // ------------------------
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π (–±—Ä–æ—Å–æ–∫)
  // ------------------------
  html.on("click", ".action-option", async ev => {
    ev.preventDefault();

    const button = ev.currentTarget;
    const actionValue = Number(button.dataset.value); // 1,2,3
    const actionType = html.find("#actionType").val();

    if (!ThreeO?.roll) {
      ui.notifications.error("–°–∏—Å—Ç–µ–º–∞ –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è—Ç—å lastRoll —Ñ–ª–∞–≥ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–¥–µ—Å—å ‚Äî ThreeO.roll –¥–µ–ª–∞–µ—Ç —ç—Ç–æ ‚Äî –Ω–æ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
    // await this.actor.setFlag(modulename, "lastRoll", { value: actionValue, type: actionType, actorId: this.actor.id, prevHP: this.actor.system.attributes.hp.value });

    // –í—ã–∑–æ–≤ –±—Ä–æ—Å–∫–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–∫—Ç—ë—Ä–∞ (ThreeO.roll —Å–æ—Ö—Ä–∞–Ω–∏—Ç prevHP)
    await ThreeO.roll(actionValue, actionType, this.actor.id);
  });

  // ------------------------
  // –ò–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –∫–ª–∏–∫–∞—Ç—å –≥–∞–ª–æ—á–∫–∏ "–û–≤–∞—Ü–∏–∏"
  // ------------------------
// –ó–≤—É–∫ –æ–≤–∞—Ü–∏–∏
const sound = game.settings.get("oxy949-threeO", "inspSound");
const volume = game.settings.get("oxy949-threeO", "inspVolume");
  // –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ 'change' —Å–æ–±—ã—Ç–∏–µ
  html.on("change", ".insp-check", async ev => {
    const idx = Number(ev.currentTarget.dataset.index);
    const isChecked = ev.currentTarget.checked;

    let current = this.actor.getFlag(modulename, "inspiration") ?? 0;

    // —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –°–ù–ò–ú–ê–ï–¢ (—Ç.–µ. –ø–µ—Ä–µ–≤—ë–ª —á–µ–∫ –≤ false) –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–∞–ª–æ—á–∫—É
    if (!isChecked && idx === current) {
 // –∑–≤—É–∫ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
if (sound) {
  AudioHelper.play({ src: sound, volume, autoplay: true, loop: false }, true);
} 
      // —É–º–µ–Ω—å—à–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –æ–≤–∞—Ü–∏–π —É –∞–∫—Ç—ë—Ä–∞ (—Ñ–ª–∞–≥)
      await this.actor.setFlag(modulename, "inspiration", current - 1);

      // –ø–æ–ª—É—á–∞–µ–º lastRoll –∏–∑ —Ñ–ª–∞–≥–∞ –∞–∫—Ç—ë—Ä–∞
      const lastRoll = this.actor.getFlag(modulename, "lastRoll");
      if (!lastRoll) {
        ui.notifications.warn("–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±—Ä–æ—Å–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.");
        return;
      }

      // –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ lastRoll –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –∞–∫—Ç—ë—Ä—É (–∑–∞—â–∏—Ç–∞)
      if (lastRoll.actorId && lastRoll.actorId !== this.actor.id) {
        ui.notifications.warn("–ü–æ—Å–ª–µ–¥–Ω–∏–π –±—Ä–æ—Å–æ–∫ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É.");
        return;
      }

      // –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º HP –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É prevHP (await ‚Äî –≤–∞–∂–Ω–æ)
      if (lastRoll.prevHP !== undefined) {
        await this.actor.update({ "system.attributes.hp.value": lastRoll.prevHP });
        // (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω) –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å UI: await this.render(false);
      }

      // –ø–∏—à–µ–º –≤ —á–∞—Ç —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–≤–∞—Ü–∏—è
      ChatMessage.create({
        speaker: ChatMessage.getSpeaker({ actor: this.actor }),
        content: `<p>üé≠ <strong style="font-size: medium; color: #005e37ff;">${this.actor.name}</strong> –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏–ª—É üëè${game.settings.get(modulename, "inspName")}üëè —á—Ç–æ–±—ã <strong style="font-size: medium; color: #005e37ff;">—É–π—Ç–∏ –æ—Ç —Å—É–¥—å–±—ã!</strong></p>`
      });

      // –ù–∞–∫–æ–Ω–µ—Ü ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –±—Ä–æ—Å–æ–∫ (–æ–Ω —Å–Ω–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –Ω–æ–≤—ã–π lastRoll)
      await ThreeO.roll(lastRoll.value, lastRoll.type, this.actor.id);
    } else {
      // –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≥–∞–ª–æ—á–∫—É –∏–ª–∏ —Ç—Ä–æ–≥–∞–µ—Ç –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—é—é ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –ª–∏—Å—Ç (—á—Ç–æ–±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥)
      this.render();
    }
  });

  // ------------------------
  // –í–∫–ª–∞–¥–∫–∏ (Notes)
  // ------------------------
  const TabsCls = foundry?.applications?.api?.Tabs ?? window.Tabs;

  this._tabs = this._tabs || {};
  this._tabs.notes = new TabsCls({
    navSelector: ".sheet-tabs",
    contentSelector: ".additional-info-section",
    initial: "note1"
  });
  this._tabs.notes.bind(html[0]);

  // ------------------------
  // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: –¥–æ–±–∞–≤–∏—Ç—å / —É–¥–∞–ª–∏—Ç—å / drag&drop
  // ------------------------
  html.on("click", ".inventory-add", async (ev) => {
    ev.preventDefault();
    const inv = [];
    html.find("input[name^='flags." + modulename + ".inventory.']").each((i, el) => {
      inv.push(el.value);
    });
    inv.push("");
    await this.actor.setFlag(modulename, "inventory", inv);
    this.render();
  });

  html.on("click", ".inventory-remove", async (ev) => {
    ev.preventDefault();
    const idx = Number(ev.currentTarget.dataset.index);
    const inv = [];
    html.find("input[name^='flags." + modulename + ".inventory.']").each((i, el) => {
      inv.push(el.value);
    });
    if (inv.length > 1 && idx >= 0 && idx < inv.length) inv.splice(idx, 1);
    await this.actor.setFlag(modulename, "inventory", inv);
    this.render();
  });

  let dragSrcIndex = null;
  html.find(".drag-handle").on("dragstart", (ev) => {
    const row = ev.currentTarget.closest(".inventory-row");
    dragSrcIndex = Number(row.dataset.index);
    ev.originalEvent.dataTransfer.effectAllowed = "move";
  });

  html.find(".inventory-row").on("dragover", (ev) => {
    ev.preventDefault();
    ev.originalEvent.dataTransfer.dropEffect = "move";
  });

  html.find(".inventory-row").on("drop", async (ev) => {
    ev.preventDefault();
    const dropIndex = Number(ev.currentTarget.dataset.index);
    if (dragSrcIndex === null || dropIndex === dragSrcIndex) return;

    const inv = [];
    html.find("input[name^='flags." + modulename + ".inventory.']").each((i, el) => {
      inv.push(el.value);
    });

    const [moved] = inv.splice(dragSrcIndex, 1);
    inv.splice(dropIndex, 0, moved);

    await this.actor.setFlag(modulename, "inventory", inv);
    this.render(false);
    dragSrcIndex = null;
  });
}


  /** –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≤—Å–µ system.* –ø–æ–ª—è */
  async _updateObject(event, formData) {
    const modulename = "oxy949-threeO";

    // --- —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å ---
    const inv = Object.keys(formData)
      .filter(k => k.startsWith(`flags.${modulename}.inventory.`))
      .sort()
      .map(k => formData[k]);
    await this.actor.setFlag(modulename, "inventory", inv);

    // --- —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ---
    const addKey = `flags.${modulename}.additionalInfo`;
    if (formData[addKey] !== undefined) {
      await this.actor.setFlag(modulename, "additionalInfo", formData[addKey]);
    }
   // --- —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ ---
const charKey = `flags.${modulename}.additionalInfoCharacter`;
if (formData[charKey] !== undefined) {
  await this.actor.setFlag(modulename, "additionalInfoCharacter", formData[charKey]);
}    

  // --- —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ (–∏–º—è, HP, system.* –∏ —Ç.–ø.) ---
const updateDataFlat = {};
for (const [k, v] of Object.entries(formData)) {
  if (k.startsWith(`flags.${modulename}.inventory.`)) continue;
  if (k === addKey) continue;
  updateDataFlat[k] = v;
}
if (Object.keys(updateDataFlat).length) {
  const updateData = foundry.utils.expandObject(updateDataFlat);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–≤–∞—Ü–∏–π
  const newInsp = getProperty(updateData, "flags.oxy949-threeO.inspiration");
  if (newInsp !== undefined) {
    const oldInsp = this.actor.getFlag("oxy949-threeO", "inspiration") ?? 0;
    if (newInsp > oldInsp) {
      // –∑–≤—É–∫ –¥–ª—è –ì–ú–∞
      const gmSound = game.settings.get("oxy949-threeO", "gmInspSound");
      const gmVolume = game.settings.get("oxy949-threeO", "gmInspVolume");
      if (gmSound) {
        AudioHelper.play({ src: gmSound, volume: gmVolume, autoplay: true, loop: false }, true);
      }

      // —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
      ChatMessage.create({
        speaker: { alias: "üëèüëèüëè" },
        content: `üé≠ <strong style="font-size: medium; color: #7b0c50ff;">${this.actor.name}</strong> - –≤ —á–µ—Å—Ç—å —Ç–µ–±—è –∑–≤—É—á–∞—Ç –±—É—Ä–Ω—ã–µ –æ–≤–∞—Ü–∏–∏! <strong style="font-size: medium; color: #7b0c50ff;">–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –∏–≥—Ä–∞!</strong>`
      });
    }
  }

  await this.actor.update(updateData);
}

  }
}

// --- –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ª–∏—Å—Ç (NPC) ---
class ThreeOGMActorSheet extends ActorSheet {
  static get defaultOptions() {
    return foundry.utils.mergeObject(super.defaultOptions, {
      classes: ["threeO", "sheet", "actor", "gm"],
      template: "modules/oxy949-threeO/templates/gm-actor-sheet.html",
      width: 450,
      height: 750,
      submitOnChange: true
    });
  }

  async getData(options) {
    const context = await super.getData(options);
    const modulename = "oxy949-threeO";

    context.isGM = game.user.isGM;
    context.gmNotes = this.actor.getFlag(modulename, "gmNotes") ?? "";
    context.resourceName = game.settings.get(modulename, "resourceName");    

    // cover.jpg
    const coverPath = `worlds/${game.world.id}/cover.jpg`;
    try { await fetch(coverPath, { method: "HEAD" }); context.cover = coverPath; }
    catch { context.cover = null; }

    return context;
  }

  activateListeners(html) {
    super.activateListeners(html);

    // –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞
    html.find(".change-token-btn").on("click", async ev => {
      ev.preventDefault();
      const fp = new FilePicker({
        type: "image",
        current: this.actor.prototypeToken.texture.src,
        callback: async (path) => {
          await this.actor.update({ "prototypeToken.texture.src": path });
          ui.notifications.info("–¢–æ–∫–µ–Ω –∏–∑–º–µ–Ω—ë–Ω.");
        }
      });
      fp.render(true);
    });
  }
}

// --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±–æ–∏—Ö –ª–∏—Å—Ç–æ–≤ ---
Hooks.once("init", function() {
  console.log("ThreeO | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –±–ª–∞–Ω–∫–æ–≤");

  Actors.registerSheet("threeO", ThreeOActorSheet, {
    types: ["character"],
    makeDefault: true
  });

  Actors.registerSheet("threeO", ThreeOGMActorSheet, {
    types: ["npc"],
    makeDefault: true
  });
});



